// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontendClient is the client API for Frontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	Migrate(ctx context.Context, in *MigrateReq, opts ...grpc.CallOption) (*MigrateRes, error)
	CreateUsuario(ctx context.Context, in *CreateUsuarioReq, opts ...grpc.CallOption) (*CreateUsuarioRes, error)
	ReadUsuario(ctx context.Context, in *ReadUsuarioReq, opts ...grpc.CallOption) (*ReadUsuarioRes, error)
	ReadUsuarios(ctx context.Context, in *ReadUsuariosReq, opts ...grpc.CallOption) (*ReadUsuariosRes, error)
	UpdateUsuario(ctx context.Context, in *UpdateUsuarioReq, opts ...grpc.CallOption) (*UpdateUsuarioRes, error)
	DeleteUsuario(ctx context.Context, in *DeleteUsuarioReq, opts ...grpc.CallOption) (*DeleteUsuarioRes, error)
	CreateServidorGravacao(ctx context.Context, in *CreateServidorGravacaoReq, opts ...grpc.CallOption) (*CreateServidorGravacaoRes, error)
	ReadServidorGravacao(ctx context.Context, in *ReadServidorGravacaoReq, opts ...grpc.CallOption) (*ReadServidorGravacaoRes, error)
	ReadServidoresGravacao(ctx context.Context, in *ReadServidoresGravacaoReq, opts ...grpc.CallOption) (*ReadServidoresGravacaoRes, error)
	UpdateServidorGravacao(ctx context.Context, in *UpdateServidorGravacaoReq, opts ...grpc.CallOption) (*UpdateServidorGravacaoRes, error)
	DeleteServidorGravacao(ctx context.Context, in *DeleteServidorGravacaoReq, opts ...grpc.CallOption) (*DeleteServidorGravacaoRes, error)
	CreateCamera(ctx context.Context, in *CreateCameraReq, opts ...grpc.CallOption) (*CreateCameraRes, error)
	ReadCamera(ctx context.Context, in *ReadCameraReq, opts ...grpc.CallOption) (*ReadCameraRes, error)
	ReadCameras(ctx context.Context, in *ReadCamerasReq, opts ...grpc.CallOption) (*ReadCamerasRes, error)
	UpdateCamera(ctx context.Context, in *UpdateCameraReq, opts ...grpc.CallOption) (*UpdateCameraRes, error)
	DeleteCamera(ctx context.Context, in *DeleteCameraReq, opts ...grpc.CallOption) (*DeleteCameraRes, error)
	CreateProcesso(ctx context.Context, in *CreateProcessoReq, opts ...grpc.CallOption) (*CreateProcessoRes, error)
	ReadProcesso(ctx context.Context, in *ReadProcessoReq, opts ...grpc.CallOption) (*ReadProcessoRes, error)
	ReadProcessos(ctx context.Context, in *ReadProcessosReq, opts ...grpc.CallOption) (*ReadProcessosRes, error)
	UpdateProcesso(ctx context.Context, in *UpdateProcessoReq, opts ...grpc.CallOption) (*UpdateProcessoRes, error)
	DeleteProcesso(ctx context.Context, in *DeleteProcessoReq, opts ...grpc.CallOption) (*DeleteProcessoRes, error)
	CreateVeiculo(ctx context.Context, in *CreateVeiculoReq, opts ...grpc.CallOption) (*CreateVeiculoRes, error)
	ReadVeiculo(ctx context.Context, in *ReadVeiculoReq, opts ...grpc.CallOption) (*ReadVeiculoRes, error)
	ReadVeiculos(ctx context.Context, in *ReadVeiculosReq, opts ...grpc.CallOption) (*ReadVeiculosRes, error)
	UpdateVeiculo(ctx context.Context, in *UpdateVeiculoReq, opts ...grpc.CallOption) (*UpdateVeiculoRes, error)
	DeleteVeiculo(ctx context.Context, in *DeleteVeiculoReq, opts ...grpc.CallOption) (*DeleteVeiculoRes, error)
}

type frontendClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendClient(cc grpc.ClientConnInterface) FrontendClient {
	return &frontendClient{cc}
}

func (c *frontendClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) Migrate(ctx context.Context, in *MigrateReq, opts ...grpc.CallOption) (*MigrateRes, error) {
	out := new(MigrateRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/Migrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) CreateUsuario(ctx context.Context, in *CreateUsuarioReq, opts ...grpc.CallOption) (*CreateUsuarioRes, error) {
	out := new(CreateUsuarioRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/CreateUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadUsuario(ctx context.Context, in *ReadUsuarioReq, opts ...grpc.CallOption) (*ReadUsuarioRes, error) {
	out := new(ReadUsuarioRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadUsuarios(ctx context.Context, in *ReadUsuariosReq, opts ...grpc.CallOption) (*ReadUsuariosRes, error) {
	out := new(ReadUsuariosRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadUsuarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) UpdateUsuario(ctx context.Context, in *UpdateUsuarioReq, opts ...grpc.CallOption) (*UpdateUsuarioRes, error) {
	out := new(UpdateUsuarioRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/UpdateUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) DeleteUsuario(ctx context.Context, in *DeleteUsuarioReq, opts ...grpc.CallOption) (*DeleteUsuarioRes, error) {
	out := new(DeleteUsuarioRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/DeleteUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) CreateServidorGravacao(ctx context.Context, in *CreateServidorGravacaoReq, opts ...grpc.CallOption) (*CreateServidorGravacaoRes, error) {
	out := new(CreateServidorGravacaoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/CreateServidorGravacao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadServidorGravacao(ctx context.Context, in *ReadServidorGravacaoReq, opts ...grpc.CallOption) (*ReadServidorGravacaoRes, error) {
	out := new(ReadServidorGravacaoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadServidorGravacao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadServidoresGravacao(ctx context.Context, in *ReadServidoresGravacaoReq, opts ...grpc.CallOption) (*ReadServidoresGravacaoRes, error) {
	out := new(ReadServidoresGravacaoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadServidoresGravacao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) UpdateServidorGravacao(ctx context.Context, in *UpdateServidorGravacaoReq, opts ...grpc.CallOption) (*UpdateServidorGravacaoRes, error) {
	out := new(UpdateServidorGravacaoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/UpdateServidorGravacao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) DeleteServidorGravacao(ctx context.Context, in *DeleteServidorGravacaoReq, opts ...grpc.CallOption) (*DeleteServidorGravacaoRes, error) {
	out := new(DeleteServidorGravacaoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/DeleteServidorGravacao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) CreateCamera(ctx context.Context, in *CreateCameraReq, opts ...grpc.CallOption) (*CreateCameraRes, error) {
	out := new(CreateCameraRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/CreateCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadCamera(ctx context.Context, in *ReadCameraReq, opts ...grpc.CallOption) (*ReadCameraRes, error) {
	out := new(ReadCameraRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadCameras(ctx context.Context, in *ReadCamerasReq, opts ...grpc.CallOption) (*ReadCamerasRes, error) {
	out := new(ReadCamerasRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadCameras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) UpdateCamera(ctx context.Context, in *UpdateCameraReq, opts ...grpc.CallOption) (*UpdateCameraRes, error) {
	out := new(UpdateCameraRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/UpdateCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) DeleteCamera(ctx context.Context, in *DeleteCameraReq, opts ...grpc.CallOption) (*DeleteCameraRes, error) {
	out := new(DeleteCameraRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/DeleteCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) CreateProcesso(ctx context.Context, in *CreateProcessoReq, opts ...grpc.CallOption) (*CreateProcessoRes, error) {
	out := new(CreateProcessoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/CreateProcesso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadProcesso(ctx context.Context, in *ReadProcessoReq, opts ...grpc.CallOption) (*ReadProcessoRes, error) {
	out := new(ReadProcessoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadProcesso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadProcessos(ctx context.Context, in *ReadProcessosReq, opts ...grpc.CallOption) (*ReadProcessosRes, error) {
	out := new(ReadProcessosRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadProcessos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) UpdateProcesso(ctx context.Context, in *UpdateProcessoReq, opts ...grpc.CallOption) (*UpdateProcessoRes, error) {
	out := new(UpdateProcessoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/UpdateProcesso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) DeleteProcesso(ctx context.Context, in *DeleteProcessoReq, opts ...grpc.CallOption) (*DeleteProcessoRes, error) {
	out := new(DeleteProcessoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/DeleteProcesso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) CreateVeiculo(ctx context.Context, in *CreateVeiculoReq, opts ...grpc.CallOption) (*CreateVeiculoRes, error) {
	out := new(CreateVeiculoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/CreateVeiculo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadVeiculo(ctx context.Context, in *ReadVeiculoReq, opts ...grpc.CallOption) (*ReadVeiculoRes, error) {
	out := new(ReadVeiculoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadVeiculo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ReadVeiculos(ctx context.Context, in *ReadVeiculosReq, opts ...grpc.CallOption) (*ReadVeiculosRes, error) {
	out := new(ReadVeiculosRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/ReadVeiculos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) UpdateVeiculo(ctx context.Context, in *UpdateVeiculoReq, opts ...grpc.CallOption) (*UpdateVeiculoRes, error) {
	out := new(UpdateVeiculoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/UpdateVeiculo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) DeleteVeiculo(ctx context.Context, in *DeleteVeiculoReq, opts ...grpc.CallOption) (*DeleteVeiculoRes, error) {
	out := new(DeleteVeiculoRes)
	err := c.cc.Invoke(ctx, "/frontend.Frontend/DeleteVeiculo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServer is the server API for Frontend service.
// All implementations must embed UnimplementedFrontendServer
// for forward compatibility
type FrontendServer interface {
	Login(context.Context, *LoginReq) (*LoginRes, error)
	Migrate(context.Context, *MigrateReq) (*MigrateRes, error)
	CreateUsuario(context.Context, *CreateUsuarioReq) (*CreateUsuarioRes, error)
	ReadUsuario(context.Context, *ReadUsuarioReq) (*ReadUsuarioRes, error)
	ReadUsuarios(context.Context, *ReadUsuariosReq) (*ReadUsuariosRes, error)
	UpdateUsuario(context.Context, *UpdateUsuarioReq) (*UpdateUsuarioRes, error)
	DeleteUsuario(context.Context, *DeleteUsuarioReq) (*DeleteUsuarioRes, error)
	CreateServidorGravacao(context.Context, *CreateServidorGravacaoReq) (*CreateServidorGravacaoRes, error)
	ReadServidorGravacao(context.Context, *ReadServidorGravacaoReq) (*ReadServidorGravacaoRes, error)
	ReadServidoresGravacao(context.Context, *ReadServidoresGravacaoReq) (*ReadServidoresGravacaoRes, error)
	UpdateServidorGravacao(context.Context, *UpdateServidorGravacaoReq) (*UpdateServidorGravacaoRes, error)
	DeleteServidorGravacao(context.Context, *DeleteServidorGravacaoReq) (*DeleteServidorGravacaoRes, error)
	CreateCamera(context.Context, *CreateCameraReq) (*CreateCameraRes, error)
	ReadCamera(context.Context, *ReadCameraReq) (*ReadCameraRes, error)
	ReadCameras(context.Context, *ReadCamerasReq) (*ReadCamerasRes, error)
	UpdateCamera(context.Context, *UpdateCameraReq) (*UpdateCameraRes, error)
	DeleteCamera(context.Context, *DeleteCameraReq) (*DeleteCameraRes, error)
	CreateProcesso(context.Context, *CreateProcessoReq) (*CreateProcessoRes, error)
	ReadProcesso(context.Context, *ReadProcessoReq) (*ReadProcessoRes, error)
	ReadProcessos(context.Context, *ReadProcessosReq) (*ReadProcessosRes, error)
	UpdateProcesso(context.Context, *UpdateProcessoReq) (*UpdateProcessoRes, error)
	DeleteProcesso(context.Context, *DeleteProcessoReq) (*DeleteProcessoRes, error)
	CreateVeiculo(context.Context, *CreateVeiculoReq) (*CreateVeiculoRes, error)
	ReadVeiculo(context.Context, *ReadVeiculoReq) (*ReadVeiculoRes, error)
	ReadVeiculos(context.Context, *ReadVeiculosReq) (*ReadVeiculosRes, error)
	UpdateVeiculo(context.Context, *UpdateVeiculoReq) (*UpdateVeiculoRes, error)
	DeleteVeiculo(context.Context, *DeleteVeiculoReq) (*DeleteVeiculoRes, error)
	mustEmbedUnimplementedFrontendServer()
}

// UnimplementedFrontendServer must be embedded to have forward compatible implementations.
type UnimplementedFrontendServer struct {
}

func (UnimplementedFrontendServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedFrontendServer) Migrate(context.Context, *MigrateReq) (*MigrateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (UnimplementedFrontendServer) CreateUsuario(context.Context, *CreateUsuarioReq) (*CreateUsuarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsuario not implemented")
}
func (UnimplementedFrontendServer) ReadUsuario(context.Context, *ReadUsuarioReq) (*ReadUsuarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUsuario not implemented")
}
func (UnimplementedFrontendServer) ReadUsuarios(context.Context, *ReadUsuariosReq) (*ReadUsuariosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUsuarios not implemented")
}
func (UnimplementedFrontendServer) UpdateUsuario(context.Context, *UpdateUsuarioReq) (*UpdateUsuarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsuario not implemented")
}
func (UnimplementedFrontendServer) DeleteUsuario(context.Context, *DeleteUsuarioReq) (*DeleteUsuarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsuario not implemented")
}
func (UnimplementedFrontendServer) CreateServidorGravacao(context.Context, *CreateServidorGravacaoReq) (*CreateServidorGravacaoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServidorGravacao not implemented")
}
func (UnimplementedFrontendServer) ReadServidorGravacao(context.Context, *ReadServidorGravacaoReq) (*ReadServidorGravacaoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadServidorGravacao not implemented")
}
func (UnimplementedFrontendServer) ReadServidoresGravacao(context.Context, *ReadServidoresGravacaoReq) (*ReadServidoresGravacaoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadServidoresGravacao not implemented")
}
func (UnimplementedFrontendServer) UpdateServidorGravacao(context.Context, *UpdateServidorGravacaoReq) (*UpdateServidorGravacaoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServidorGravacao not implemented")
}
func (UnimplementedFrontendServer) DeleteServidorGravacao(context.Context, *DeleteServidorGravacaoReq) (*DeleteServidorGravacaoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServidorGravacao not implemented")
}
func (UnimplementedFrontendServer) CreateCamera(context.Context, *CreateCameraReq) (*CreateCameraRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCamera not implemented")
}
func (UnimplementedFrontendServer) ReadCamera(context.Context, *ReadCameraReq) (*ReadCameraRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCamera not implemented")
}
func (UnimplementedFrontendServer) ReadCameras(context.Context, *ReadCamerasReq) (*ReadCamerasRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCameras not implemented")
}
func (UnimplementedFrontendServer) UpdateCamera(context.Context, *UpdateCameraReq) (*UpdateCameraRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCamera not implemented")
}
func (UnimplementedFrontendServer) DeleteCamera(context.Context, *DeleteCameraReq) (*DeleteCameraRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCamera not implemented")
}
func (UnimplementedFrontendServer) CreateProcesso(context.Context, *CreateProcessoReq) (*CreateProcessoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcesso not implemented")
}
func (UnimplementedFrontendServer) ReadProcesso(context.Context, *ReadProcessoReq) (*ReadProcessoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProcesso not implemented")
}
func (UnimplementedFrontendServer) ReadProcessos(context.Context, *ReadProcessosReq) (*ReadProcessosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProcessos not implemented")
}
func (UnimplementedFrontendServer) UpdateProcesso(context.Context, *UpdateProcessoReq) (*UpdateProcessoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcesso not implemented")
}
func (UnimplementedFrontendServer) DeleteProcesso(context.Context, *DeleteProcessoReq) (*DeleteProcessoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcesso not implemented")
}
func (UnimplementedFrontendServer) CreateVeiculo(context.Context, *CreateVeiculoReq) (*CreateVeiculoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVeiculo not implemented")
}
func (UnimplementedFrontendServer) ReadVeiculo(context.Context, *ReadVeiculoReq) (*ReadVeiculoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVeiculo not implemented")
}
func (UnimplementedFrontendServer) ReadVeiculos(context.Context, *ReadVeiculosReq) (*ReadVeiculosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVeiculos not implemented")
}
func (UnimplementedFrontendServer) UpdateVeiculo(context.Context, *UpdateVeiculoReq) (*UpdateVeiculoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVeiculo not implemented")
}
func (UnimplementedFrontendServer) DeleteVeiculo(context.Context, *DeleteVeiculoReq) (*DeleteVeiculoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVeiculo not implemented")
}
func (UnimplementedFrontendServer) mustEmbedUnimplementedFrontendServer() {}

// UnsafeFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendServer will
// result in compilation errors.
type UnsafeFrontendServer interface {
	mustEmbedUnimplementedFrontendServer()
}

func RegisterFrontendServer(s grpc.ServiceRegistrar, srv FrontendServer) {
	s.RegisterService(&Frontend_ServiceDesc, srv)
}

func _Frontend_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/Migrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).Migrate(ctx, req.(*MigrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_CreateUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsuarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CreateUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/CreateUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CreateUsuario(ctx, req.(*CreateUsuarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUsuarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadUsuario(ctx, req.(*ReadUsuarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadUsuarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUsuariosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadUsuarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadUsuarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadUsuarios(ctx, req.(*ReadUsuariosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_UpdateUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsuarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).UpdateUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/UpdateUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).UpdateUsuario(ctx, req.(*UpdateUsuarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_DeleteUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUsuarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).DeleteUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/DeleteUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).DeleteUsuario(ctx, req.(*DeleteUsuarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_CreateServidorGravacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServidorGravacaoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CreateServidorGravacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/CreateServidorGravacao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CreateServidorGravacao(ctx, req.(*CreateServidorGravacaoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadServidorGravacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadServidorGravacaoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadServidorGravacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadServidorGravacao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadServidorGravacao(ctx, req.(*ReadServidorGravacaoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadServidoresGravacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadServidoresGravacaoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadServidoresGravacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadServidoresGravacao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadServidoresGravacao(ctx, req.(*ReadServidoresGravacaoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_UpdateServidorGravacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServidorGravacaoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).UpdateServidorGravacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/UpdateServidorGravacao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).UpdateServidorGravacao(ctx, req.(*UpdateServidorGravacaoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_DeleteServidorGravacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServidorGravacaoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).DeleteServidorGravacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/DeleteServidorGravacao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).DeleteServidorGravacao(ctx, req.(*DeleteServidorGravacaoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_CreateCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCameraReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CreateCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/CreateCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CreateCamera(ctx, req.(*CreateCameraReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCameraReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadCamera(ctx, req.(*ReadCameraReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadCameras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCamerasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadCameras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadCameras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadCameras(ctx, req.(*ReadCamerasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_UpdateCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCameraReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).UpdateCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/UpdateCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).UpdateCamera(ctx, req.(*UpdateCameraReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_DeleteCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCameraReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).DeleteCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/DeleteCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).DeleteCamera(ctx, req.(*DeleteCameraReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_CreateProcesso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CreateProcesso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/CreateProcesso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CreateProcesso(ctx, req.(*CreateProcessoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadProcesso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProcessoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadProcesso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadProcesso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadProcesso(ctx, req.(*ReadProcessoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadProcessos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProcessosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadProcessos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadProcessos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadProcessos(ctx, req.(*ReadProcessosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_UpdateProcesso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).UpdateProcesso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/UpdateProcesso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).UpdateProcesso(ctx, req.(*UpdateProcessoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_DeleteProcesso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcessoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).DeleteProcesso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/DeleteProcesso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).DeleteProcesso(ctx, req.(*DeleteProcessoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_CreateVeiculo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVeiculoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CreateVeiculo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/CreateVeiculo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CreateVeiculo(ctx, req.(*CreateVeiculoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadVeiculo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVeiculoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadVeiculo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadVeiculo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadVeiculo(ctx, req.(*ReadVeiculoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ReadVeiculos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVeiculosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ReadVeiculos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/ReadVeiculos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ReadVeiculos(ctx, req.(*ReadVeiculosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_UpdateVeiculo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVeiculoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).UpdateVeiculo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/UpdateVeiculo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).UpdateVeiculo(ctx, req.(*UpdateVeiculoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_DeleteVeiculo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVeiculoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).DeleteVeiculo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.Frontend/DeleteVeiculo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).DeleteVeiculo(ctx, req.(*DeleteVeiculoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Frontend_ServiceDesc is the grpc.ServiceDesc for Frontend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Frontend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frontend.Frontend",
	HandlerType: (*FrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Frontend_Login_Handler,
		},
		{
			MethodName: "Migrate",
			Handler:    _Frontend_Migrate_Handler,
		},
		{
			MethodName: "CreateUsuario",
			Handler:    _Frontend_CreateUsuario_Handler,
		},
		{
			MethodName: "ReadUsuario",
			Handler:    _Frontend_ReadUsuario_Handler,
		},
		{
			MethodName: "ReadUsuarios",
			Handler:    _Frontend_ReadUsuarios_Handler,
		},
		{
			MethodName: "UpdateUsuario",
			Handler:    _Frontend_UpdateUsuario_Handler,
		},
		{
			MethodName: "DeleteUsuario",
			Handler:    _Frontend_DeleteUsuario_Handler,
		},
		{
			MethodName: "CreateServidorGravacao",
			Handler:    _Frontend_CreateServidorGravacao_Handler,
		},
		{
			MethodName: "ReadServidorGravacao",
			Handler:    _Frontend_ReadServidorGravacao_Handler,
		},
		{
			MethodName: "ReadServidoresGravacao",
			Handler:    _Frontend_ReadServidoresGravacao_Handler,
		},
		{
			MethodName: "UpdateServidorGravacao",
			Handler:    _Frontend_UpdateServidorGravacao_Handler,
		},
		{
			MethodName: "DeleteServidorGravacao",
			Handler:    _Frontend_DeleteServidorGravacao_Handler,
		},
		{
			MethodName: "CreateCamera",
			Handler:    _Frontend_CreateCamera_Handler,
		},
		{
			MethodName: "ReadCamera",
			Handler:    _Frontend_ReadCamera_Handler,
		},
		{
			MethodName: "ReadCameras",
			Handler:    _Frontend_ReadCameras_Handler,
		},
		{
			MethodName: "UpdateCamera",
			Handler:    _Frontend_UpdateCamera_Handler,
		},
		{
			MethodName: "DeleteCamera",
			Handler:    _Frontend_DeleteCamera_Handler,
		},
		{
			MethodName: "CreateProcesso",
			Handler:    _Frontend_CreateProcesso_Handler,
		},
		{
			MethodName: "ReadProcesso",
			Handler:    _Frontend_ReadProcesso_Handler,
		},
		{
			MethodName: "ReadProcessos",
			Handler:    _Frontend_ReadProcessos_Handler,
		},
		{
			MethodName: "UpdateProcesso",
			Handler:    _Frontend_UpdateProcesso_Handler,
		},
		{
			MethodName: "DeleteProcesso",
			Handler:    _Frontend_DeleteProcesso_Handler,
		},
		{
			MethodName: "CreateVeiculo",
			Handler:    _Frontend_CreateVeiculo_Handler,
		},
		{
			MethodName: "ReadVeiculo",
			Handler:    _Frontend_ReadVeiculo_Handler,
		},
		{
			MethodName: "ReadVeiculos",
			Handler:    _Frontend_ReadVeiculos_Handler,
		},
		{
			MethodName: "UpdateVeiculo",
			Handler:    _Frontend_UpdateVeiculo_Handler,
		},
		{
			MethodName: "DeleteVeiculo",
			Handler:    _Frontend_DeleteVeiculo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}
