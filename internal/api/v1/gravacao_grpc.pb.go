// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GravacaoClient is the client API for Gravacao service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GravacaoClient interface {
	Registrar(ctx context.Context, in *RegistrarReq, opts ...grpc.CallOption) (*RegistrarRes, error)
	RemoverRegistro(ctx context.Context, in *RemoverRegistroReq, opts ...grpc.CallOption) (*RemoverRegistroRes, error)
	StartProcessos(ctx context.Context, in *StartProcessosReq, opts ...grpc.CallOption) (*StartProcessosRes, error)
	StopProcessos(ctx context.Context, in *StopProcessosReq, opts ...grpc.CallOption) (*StopProcessosRes, error)
	ListProcessos(ctx context.Context, in *ListProcessosReq, opts ...grpc.CallOption) (*ListProcessosRes, error)
	UpdateVeiculos(ctx context.Context, in *UpdateVeiculosReq, opts ...grpc.CallOption) (*UpdateVeiculosRes, error)
	UpdateArmazenamento(ctx context.Context, in *UpdateArmazenamentoReq, opts ...grpc.CallOption) (*UpdateArmazenamentoRes, error)
}

type gravacaoClient struct {
	cc grpc.ClientConnInterface
}

func NewGravacaoClient(cc grpc.ClientConnInterface) GravacaoClient {
	return &gravacaoClient{cc}
}

func (c *gravacaoClient) Registrar(ctx context.Context, in *RegistrarReq, opts ...grpc.CallOption) (*RegistrarRes, error) {
	out := new(RegistrarRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/Registrar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) RemoverRegistro(ctx context.Context, in *RemoverRegistroReq, opts ...grpc.CallOption) (*RemoverRegistroRes, error) {
	out := new(RemoverRegistroRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/RemoverRegistro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) StartProcessos(ctx context.Context, in *StartProcessosReq, opts ...grpc.CallOption) (*StartProcessosRes, error) {
	out := new(StartProcessosRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/StartProcessos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) StopProcessos(ctx context.Context, in *StopProcessosReq, opts ...grpc.CallOption) (*StopProcessosRes, error) {
	out := new(StopProcessosRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/StopProcessos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) ListProcessos(ctx context.Context, in *ListProcessosReq, opts ...grpc.CallOption) (*ListProcessosRes, error) {
	out := new(ListProcessosRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/ListProcessos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) UpdateVeiculos(ctx context.Context, in *UpdateVeiculosReq, opts ...grpc.CallOption) (*UpdateVeiculosRes, error) {
	out := new(UpdateVeiculosRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/UpdateVeiculos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) UpdateArmazenamento(ctx context.Context, in *UpdateArmazenamentoReq, opts ...grpc.CallOption) (*UpdateArmazenamentoRes, error) {
	out := new(UpdateArmazenamentoRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/UpdateArmazenamento", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GravacaoServer is the server API for Gravacao service.
// All implementations must embed UnimplementedGravacaoServer
// for forward compatibility
type GravacaoServer interface {
	Registrar(context.Context, *RegistrarReq) (*RegistrarRes, error)
	RemoverRegistro(context.Context, *RemoverRegistroReq) (*RemoverRegistroRes, error)
	StartProcessos(context.Context, *StartProcessosReq) (*StartProcessosRes, error)
	StopProcessos(context.Context, *StopProcessosReq) (*StopProcessosRes, error)
	ListProcessos(context.Context, *ListProcessosReq) (*ListProcessosRes, error)
	UpdateVeiculos(context.Context, *UpdateVeiculosReq) (*UpdateVeiculosRes, error)
	UpdateArmazenamento(context.Context, *UpdateArmazenamentoReq) (*UpdateArmazenamentoRes, error)
	mustEmbedUnimplementedGravacaoServer()
}

// UnimplementedGravacaoServer must be embedded to have forward compatible implementations.
type UnimplementedGravacaoServer struct {
}

func (UnimplementedGravacaoServer) Registrar(context.Context, *RegistrarReq) (*RegistrarRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registrar not implemented")
}
func (UnimplementedGravacaoServer) RemoverRegistro(context.Context, *RemoverRegistroReq) (*RemoverRegistroRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoverRegistro not implemented")
}
func (UnimplementedGravacaoServer) StartProcessos(context.Context, *StartProcessosReq) (*StartProcessosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProcessos not implemented")
}
func (UnimplementedGravacaoServer) StopProcessos(context.Context, *StopProcessosReq) (*StopProcessosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcessos not implemented")
}
func (UnimplementedGravacaoServer) ListProcessos(context.Context, *ListProcessosReq) (*ListProcessosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessos not implemented")
}
func (UnimplementedGravacaoServer) UpdateVeiculos(context.Context, *UpdateVeiculosReq) (*UpdateVeiculosRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVeiculos not implemented")
}
func (UnimplementedGravacaoServer) UpdateArmazenamento(context.Context, *UpdateArmazenamentoReq) (*UpdateArmazenamentoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArmazenamento not implemented")
}
func (UnimplementedGravacaoServer) mustEmbedUnimplementedGravacaoServer() {}

// UnsafeGravacaoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GravacaoServer will
// result in compilation errors.
type UnsafeGravacaoServer interface {
	mustEmbedUnimplementedGravacaoServer()
}

func RegisterGravacaoServer(s grpc.ServiceRegistrar, srv GravacaoServer) {
	s.RegisterService(&Gravacao_ServiceDesc, srv)
}

func _Gravacao_Registrar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).Registrar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/Registrar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).Registrar(ctx, req.(*RegistrarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_RemoverRegistro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoverRegistroReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).RemoverRegistro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/RemoverRegistro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).RemoverRegistro(ctx, req.(*RemoverRegistroReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_StartProcessos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProcessosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).StartProcessos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/StartProcessos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).StartProcessos(ctx, req.(*StartProcessosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_StopProcessos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopProcessosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).StopProcessos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/StopProcessos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).StopProcessos(ctx, req.(*StopProcessosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_ListProcessos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).ListProcessos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/ListProcessos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).ListProcessos(ctx, req.(*ListProcessosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_UpdateVeiculos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVeiculosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).UpdateVeiculos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/UpdateVeiculos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).UpdateVeiculos(ctx, req.(*UpdateVeiculosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_UpdateArmazenamento_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArmazenamentoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).UpdateArmazenamento(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/UpdateArmazenamento",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).UpdateArmazenamento(ctx, req.(*UpdateArmazenamentoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Gravacao_ServiceDesc is the grpc.ServiceDesc for Gravacao service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gravacao_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gravacao.Gravacao",
	HandlerType: (*GravacaoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registrar",
			Handler:    _Gravacao_Registrar_Handler,
		},
		{
			MethodName: "RemoverRegistro",
			Handler:    _Gravacao_RemoverRegistro_Handler,
		},
		{
			MethodName: "StartProcessos",
			Handler:    _Gravacao_StartProcessos_Handler,
		},
		{
			MethodName: "StopProcessos",
			Handler:    _Gravacao_StopProcessos_Handler,
		},
		{
			MethodName: "ListProcessos",
			Handler:    _Gravacao_ListProcessos_Handler,
		},
		{
			MethodName: "UpdateVeiculos",
			Handler:    _Gravacao_UpdateVeiculos_Handler,
		},
		{
			MethodName: "UpdateArmazenamento",
			Handler:    _Gravacao_UpdateArmazenamento_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravacao.proto",
}
